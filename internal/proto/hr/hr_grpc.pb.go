// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.1
// source: internal/proto/hr/hr.proto

package hrPb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HrServiceClient is the client API for HrService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HrServiceClient interface {
	CreateHr(ctx context.Context, in *CreateHrRequest, opts ...grpc.CallOption) (*CreateHrResponse, error)
	DeleteHr(ctx context.Context, in *DeleteHrRequest, opts ...grpc.CallOption) (*DeleteHrResponse, error)
	GetHr(ctx context.Context, in *GetHrRequest, opts ...grpc.CallOption) (*GetHrResponse, error)
	CreateHiring(ctx context.Context, in *CreateHiringRequest, opts ...grpc.CallOption) (*CreateHiringResponse, error)
	DeleteHiring(ctx context.Context, in *DeleteHiringRequest, opts ...grpc.CallOption) (*DeleteHiringResponse, error)
	// Shall be used by students.
	GetJob(ctx context.Context, in *GetJobRequest, opts ...grpc.CallOption) (*GetJobResponse, error)
	GetAllJobs(ctx context.Context, in *GetAllJobsRequest, opts ...grpc.CallOption) (*GetAllJobsResponse, error)
}

type hrServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHrServiceClient(cc grpc.ClientConnInterface) HrServiceClient {
	return &hrServiceClient{cc}
}

func (c *hrServiceClient) CreateHr(ctx context.Context, in *CreateHrRequest, opts ...grpc.CallOption) (*CreateHrResponse, error) {
	out := new(CreateHrResponse)
	err := c.cc.Invoke(ctx, "/hr.hrService/CreateHr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hrServiceClient) DeleteHr(ctx context.Context, in *DeleteHrRequest, opts ...grpc.CallOption) (*DeleteHrResponse, error) {
	out := new(DeleteHrResponse)
	err := c.cc.Invoke(ctx, "/hr.hrService/DeleteHr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hrServiceClient) GetHr(ctx context.Context, in *GetHrRequest, opts ...grpc.CallOption) (*GetHrResponse, error) {
	out := new(GetHrResponse)
	err := c.cc.Invoke(ctx, "/hr.hrService/GetHr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hrServiceClient) CreateHiring(ctx context.Context, in *CreateHiringRequest, opts ...grpc.CallOption) (*CreateHiringResponse, error) {
	out := new(CreateHiringResponse)
	err := c.cc.Invoke(ctx, "/hr.hrService/CreateHiring", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hrServiceClient) DeleteHiring(ctx context.Context, in *DeleteHiringRequest, opts ...grpc.CallOption) (*DeleteHiringResponse, error) {
	out := new(DeleteHiringResponse)
	err := c.cc.Invoke(ctx, "/hr.hrService/DeleteHiring", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hrServiceClient) GetJob(ctx context.Context, in *GetJobRequest, opts ...grpc.CallOption) (*GetJobResponse, error) {
	out := new(GetJobResponse)
	err := c.cc.Invoke(ctx, "/hr.hrService/GetJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hrServiceClient) GetAllJobs(ctx context.Context, in *GetAllJobsRequest, opts ...grpc.CallOption) (*GetAllJobsResponse, error) {
	out := new(GetAllJobsResponse)
	err := c.cc.Invoke(ctx, "/hr.hrService/GetAllJobs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HrServiceServer is the server API for HrService service.
// All implementations must embed UnimplementedHrServiceServer
// for forward compatibility
type HrServiceServer interface {
	CreateHr(context.Context, *CreateHrRequest) (*CreateHrResponse, error)
	DeleteHr(context.Context, *DeleteHrRequest) (*DeleteHrResponse, error)
	GetHr(context.Context, *GetHrRequest) (*GetHrResponse, error)
	CreateHiring(context.Context, *CreateHiringRequest) (*CreateHiringResponse, error)
	DeleteHiring(context.Context, *DeleteHiringRequest) (*DeleteHiringResponse, error)
	// Shall be used by students.
	GetJob(context.Context, *GetJobRequest) (*GetJobResponse, error)
	GetAllJobs(context.Context, *GetAllJobsRequest) (*GetAllJobsResponse, error)
	mustEmbedUnimplementedHrServiceServer()
}

// UnimplementedHrServiceServer must be embedded to have forward compatible implementations.
type UnimplementedHrServiceServer struct {
}

func (UnimplementedHrServiceServer) CreateHr(context.Context, *CreateHrRequest) (*CreateHrResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHr not implemented")
}
func (UnimplementedHrServiceServer) DeleteHr(context.Context, *DeleteHrRequest) (*DeleteHrResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteHr not implemented")
}
func (UnimplementedHrServiceServer) GetHr(context.Context, *GetHrRequest) (*GetHrResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHr not implemented")
}
func (UnimplementedHrServiceServer) CreateHiring(context.Context, *CreateHiringRequest) (*CreateHiringResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHiring not implemented")
}
func (UnimplementedHrServiceServer) DeleteHiring(context.Context, *DeleteHiringRequest) (*DeleteHiringResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteHiring not implemented")
}
func (UnimplementedHrServiceServer) GetJob(context.Context, *GetJobRequest) (*GetJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJob not implemented")
}
func (UnimplementedHrServiceServer) GetAllJobs(context.Context, *GetAllJobsRequest) (*GetAllJobsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllJobs not implemented")
}
func (UnimplementedHrServiceServer) mustEmbedUnimplementedHrServiceServer() {}

// UnsafeHrServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HrServiceServer will
// result in compilation errors.
type UnsafeHrServiceServer interface {
	mustEmbedUnimplementedHrServiceServer()
}

func RegisterHrServiceServer(s grpc.ServiceRegistrar, srv HrServiceServer) {
	s.RegisterService(&HrService_ServiceDesc, srv)
}

func _HrService_CreateHr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateHrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HrServiceServer).CreateHr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hr.hrService/CreateHr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HrServiceServer).CreateHr(ctx, req.(*CreateHrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HrService_DeleteHr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteHrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HrServiceServer).DeleteHr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hr.hrService/DeleteHr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HrServiceServer).DeleteHr(ctx, req.(*DeleteHrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HrService_GetHr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HrServiceServer).GetHr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hr.hrService/GetHr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HrServiceServer).GetHr(ctx, req.(*GetHrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HrService_CreateHiring_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateHiringRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HrServiceServer).CreateHiring(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hr.hrService/CreateHiring",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HrServiceServer).CreateHiring(ctx, req.(*CreateHiringRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HrService_DeleteHiring_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteHiringRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HrServiceServer).DeleteHiring(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hr.hrService/DeleteHiring",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HrServiceServer).DeleteHiring(ctx, req.(*DeleteHiringRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HrService_GetJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HrServiceServer).GetJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hr.hrService/GetJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HrServiceServer).GetJob(ctx, req.(*GetJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HrService_GetAllJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllJobsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HrServiceServer).GetAllJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hr.hrService/GetAllJobs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HrServiceServer).GetAllJobs(ctx, req.(*GetAllJobsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HrService_ServiceDesc is the grpc.ServiceDesc for HrService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HrService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hr.hrService",
	HandlerType: (*HrServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateHr",
			Handler:    _HrService_CreateHr_Handler,
		},
		{
			MethodName: "DeleteHr",
			Handler:    _HrService_DeleteHr_Handler,
		},
		{
			MethodName: "GetHr",
			Handler:    _HrService_GetHr_Handler,
		},
		{
			MethodName: "CreateHiring",
			Handler:    _HrService_CreateHiring_Handler,
		},
		{
			MethodName: "DeleteHiring",
			Handler:    _HrService_DeleteHiring_Handler,
		},
		{
			MethodName: "GetJob",
			Handler:    _HrService_GetJob_Handler,
		},
		{
			MethodName: "GetAllJobs",
			Handler:    _HrService_GetAllJobs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/proto/hr/hr.proto",
}
