// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.1
// source: internal/proto/application/application.proto

package jobApplicationPb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// JobApplicationServiceClient is the client API for JobApplicationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JobApplicationServiceClient interface {
	AddJobApplication(ctx context.Context, in *JobApplicationRequest, opts ...grpc.CallOption) (*JobApplicationResponse, error)
	GetJobApplicationStatus(ctx context.Context, in *JobApplicationStatusRequest, opts ...grpc.CallOption) (*JobApplicationStatusResponse, error)
	GetAllJobApplicationStatus(ctx context.Context, in *AllJobApplicationRequest, opts ...grpc.CallOption) (*AllJobApplicationStatusResponse, error)
}

type jobApplicationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewJobApplicationServiceClient(cc grpc.ClientConnInterface) JobApplicationServiceClient {
	return &jobApplicationServiceClient{cc}
}

func (c *jobApplicationServiceClient) AddJobApplication(ctx context.Context, in *JobApplicationRequest, opts ...grpc.CallOption) (*JobApplicationResponse, error) {
	out := new(JobApplicationResponse)
	err := c.cc.Invoke(ctx, "/job_application.jobApplicationService/AddJobApplication", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobApplicationServiceClient) GetJobApplicationStatus(ctx context.Context, in *JobApplicationStatusRequest, opts ...grpc.CallOption) (*JobApplicationStatusResponse, error) {
	out := new(JobApplicationStatusResponse)
	err := c.cc.Invoke(ctx, "/job_application.jobApplicationService/GetJobApplicationStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobApplicationServiceClient) GetAllJobApplicationStatus(ctx context.Context, in *AllJobApplicationRequest, opts ...grpc.CallOption) (*AllJobApplicationStatusResponse, error) {
	out := new(AllJobApplicationStatusResponse)
	err := c.cc.Invoke(ctx, "/job_application.jobApplicationService/GetAllJobApplicationStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JobApplicationServiceServer is the server API for JobApplicationService service.
// All implementations must embed UnimplementedJobApplicationServiceServer
// for forward compatibility
type JobApplicationServiceServer interface {
	AddJobApplication(context.Context, *JobApplicationRequest) (*JobApplicationResponse, error)
	GetJobApplicationStatus(context.Context, *JobApplicationStatusRequest) (*JobApplicationStatusResponse, error)
	GetAllJobApplicationStatus(context.Context, *AllJobApplicationRequest) (*AllJobApplicationStatusResponse, error)
	mustEmbedUnimplementedJobApplicationServiceServer()
}

// UnimplementedJobApplicationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedJobApplicationServiceServer struct {
}

func (UnimplementedJobApplicationServiceServer) AddJobApplication(context.Context, *JobApplicationRequest) (*JobApplicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddJobApplication not implemented")
}
func (UnimplementedJobApplicationServiceServer) GetJobApplicationStatus(context.Context, *JobApplicationStatusRequest) (*JobApplicationStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJobApplicationStatus not implemented")
}
func (UnimplementedJobApplicationServiceServer) GetAllJobApplicationStatus(context.Context, *AllJobApplicationRequest) (*AllJobApplicationStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllJobApplicationStatus not implemented")
}
func (UnimplementedJobApplicationServiceServer) mustEmbedUnimplementedJobApplicationServiceServer() {}

// UnsafeJobApplicationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JobApplicationServiceServer will
// result in compilation errors.
type UnsafeJobApplicationServiceServer interface {
	mustEmbedUnimplementedJobApplicationServiceServer()
}

func RegisterJobApplicationServiceServer(s grpc.ServiceRegistrar, srv JobApplicationServiceServer) {
	s.RegisterService(&JobApplicationService_ServiceDesc, srv)
}

func _JobApplicationService_AddJobApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobApplicationServiceServer).AddJobApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/job_application.jobApplicationService/AddJobApplication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobApplicationServiceServer).AddJobApplication(ctx, req.(*JobApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobApplicationService_GetJobApplicationStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobApplicationStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobApplicationServiceServer).GetJobApplicationStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/job_application.jobApplicationService/GetJobApplicationStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobApplicationServiceServer).GetJobApplicationStatus(ctx, req.(*JobApplicationStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobApplicationService_GetAllJobApplicationStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllJobApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobApplicationServiceServer).GetAllJobApplicationStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/job_application.jobApplicationService/GetAllJobApplicationStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobApplicationServiceServer).GetAllJobApplicationStatus(ctx, req.(*AllJobApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// JobApplicationService_ServiceDesc is the grpc.ServiceDesc for JobApplicationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var JobApplicationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "job_application.jobApplicationService",
	HandlerType: (*JobApplicationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddJobApplication",
			Handler:    _JobApplicationService_AddJobApplication_Handler,
		},
		{
			MethodName: "GetJobApplicationStatus",
			Handler:    _JobApplicationService_GetJobApplicationStatus_Handler,
		},
		{
			MethodName: "GetAllJobApplicationStatus",
			Handler:    _JobApplicationService_GetAllJobApplicationStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/proto/application/application.proto",
}
