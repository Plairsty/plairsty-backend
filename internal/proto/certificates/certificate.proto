syntax = "proto3";

package certificate;
option go_package = "certificate/certificatePb";
import "google/protobuf/timestamp.proto";

enum STATUS {
  PENDING = 0;
  APPROVED = 1;
  REJECTED = 2;
  FAILED = 3;
}
message certificate_data {
  bytes data = 1;
}
message certificate_fields {
  // All detail about the certificate
  string title = 1;
  string description = 2;
  string certificate_id = 3;
  string certificate_file_url = 4;
  google.protobuf.Timestamp allocated_date = 5;
  string allocated_by = 6;
  google.protobuf.Timestamp expiry_date = 7;
  string certificate_type = 8; // eg. "certificate", "diploma", "degree"
  string certificate_level = 9; // eg. "basic", "intermediate", "advanced"
  string certificate_category = 10; // eg. "academic", "professional", "personal"
  string certificate_issuer = 11;
  string domain = 12;
  int64 id = 13;
}

message AddCertificateRequest {
  int64 user_id = 1;
  certificate_data data = 2;
  certificate_fields certificate = 3;
}

message AddCertificateResponse {
  int64 certificate_id = 1;
  STATUS status = 2;
}

message GetAllCertificateRequest {
  int64 user_id = 1;
}

message GetAllCertificateResponse {
  repeated certificate_fields certificate = 1;
  STATUS status = 2;
}

message GetCertificateRequest {
  int64 certificate_id = 2;
}

message GetCertificateResponse {
  certificate_fields certificate = 1;
  STATUS status = 2;
}

message UpdateCertificateRequest {
  int64 certificate_id = 1;
  certificate_fields certificate = 2;
}

message UpdateCertificateResponse {
  STATUS status = 1;
}

message DeleteCertificateRequest {
  int64 certificate_id = 1;
}

message DeleteCertificateResponse {
  STATUS status = 1;
}

message ChangeCertificateStatusRequest {
  int64 certificate_id = 1;
  STATUS status = 2;
}

message ChangeCertificateStatusResponse {
  STATUS status = 1;
}

service CertificateService {
  // Add a new certificate, then it will be uploaded to s3 and url will be stored in db
  rpc AddCertificate(stream AddCertificateRequest) returns (AddCertificateResponse);

  // Get all certificate of a user
  rpc GetAllCertificate(GetAllCertificateRequest) returns (GetAllCertificateResponse);
  rpc GetCertificate(GetCertificateRequest) returns (GetCertificateResponse);
  rpc UpdateCertificate(UpdateCertificateRequest) returns (UpdateCertificateResponse);
  rpc DeleteCertificate(DeleteCertificateRequest) returns (DeleteCertificateResponse);
  rpc ChangeCertificateStatus(ChangeCertificateStatusRequest) returns (ChangeCertificateStatusResponse);
}