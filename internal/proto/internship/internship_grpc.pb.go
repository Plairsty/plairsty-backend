// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.1
// source: internal/proto/internship/internship.proto

package internshipPb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// InternshipServiceClient is the client API for InternshipService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InternshipServiceClient interface {
	AddInternship(ctx context.Context, in *AddInternshipRequest, opts ...grpc.CallOption) (*AddInternshipResponse, error)
	GetInternship(ctx context.Context, in *GetInternshipRequest, opts ...grpc.CallOption) (*GetInternshipResponse, error)
	GetAllInternships(ctx context.Context, in *GetAllInternshipsRequest, opts ...grpc.CallOption) (*GetAllInternshipsResponse, error)
	UpdateInternship(ctx context.Context, in *UpdateInternshipRequest, opts ...grpc.CallOption) (*UpdateInternshipResponse, error)
	DeleteInternship(ctx context.Context, in *DeleteInternshipRequest, opts ...grpc.CallOption) (*DeleteInternshipResponse, error)
}

type internshipServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInternshipServiceClient(cc grpc.ClientConnInterface) InternshipServiceClient {
	return &internshipServiceClient{cc}
}

func (c *internshipServiceClient) AddInternship(ctx context.Context, in *AddInternshipRequest, opts ...grpc.CallOption) (*AddInternshipResponse, error) {
	out := new(AddInternshipResponse)
	err := c.cc.Invoke(ctx, "/internship.InternshipService/AddInternship", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internshipServiceClient) GetInternship(ctx context.Context, in *GetInternshipRequest, opts ...grpc.CallOption) (*GetInternshipResponse, error) {
	out := new(GetInternshipResponse)
	err := c.cc.Invoke(ctx, "/internship.InternshipService/GetInternship", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internshipServiceClient) GetAllInternships(ctx context.Context, in *GetAllInternshipsRequest, opts ...grpc.CallOption) (*GetAllInternshipsResponse, error) {
	out := new(GetAllInternshipsResponse)
	err := c.cc.Invoke(ctx, "/internship.InternshipService/GetAllInternships", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internshipServiceClient) UpdateInternship(ctx context.Context, in *UpdateInternshipRequest, opts ...grpc.CallOption) (*UpdateInternshipResponse, error) {
	out := new(UpdateInternshipResponse)
	err := c.cc.Invoke(ctx, "/internship.InternshipService/UpdateInternship", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internshipServiceClient) DeleteInternship(ctx context.Context, in *DeleteInternshipRequest, opts ...grpc.CallOption) (*DeleteInternshipResponse, error) {
	out := new(DeleteInternshipResponse)
	err := c.cc.Invoke(ctx, "/internship.InternshipService/DeleteInternship", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InternshipServiceServer is the server API for InternshipService service.
// All implementations must embed UnimplementedInternshipServiceServer
// for forward compatibility
type InternshipServiceServer interface {
	AddInternship(context.Context, *AddInternshipRequest) (*AddInternshipResponse, error)
	GetInternship(context.Context, *GetInternshipRequest) (*GetInternshipResponse, error)
	GetAllInternships(context.Context, *GetAllInternshipsRequest) (*GetAllInternshipsResponse, error)
	UpdateInternship(context.Context, *UpdateInternshipRequest) (*UpdateInternshipResponse, error)
	DeleteInternship(context.Context, *DeleteInternshipRequest) (*DeleteInternshipResponse, error)
	mustEmbedUnimplementedInternshipServiceServer()
}

// UnimplementedInternshipServiceServer must be embedded to have forward compatible implementations.
type UnimplementedInternshipServiceServer struct {
}

func (UnimplementedInternshipServiceServer) AddInternship(context.Context, *AddInternshipRequest) (*AddInternshipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddInternship not implemented")
}
func (UnimplementedInternshipServiceServer) GetInternship(context.Context, *GetInternshipRequest) (*GetInternshipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInternship not implemented")
}
func (UnimplementedInternshipServiceServer) GetAllInternships(context.Context, *GetAllInternshipsRequest) (*GetAllInternshipsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllInternships not implemented")
}
func (UnimplementedInternshipServiceServer) UpdateInternship(context.Context, *UpdateInternshipRequest) (*UpdateInternshipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateInternship not implemented")
}
func (UnimplementedInternshipServiceServer) DeleteInternship(context.Context, *DeleteInternshipRequest) (*DeleteInternshipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteInternship not implemented")
}
func (UnimplementedInternshipServiceServer) mustEmbedUnimplementedInternshipServiceServer() {}

// UnsafeInternshipServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InternshipServiceServer will
// result in compilation errors.
type UnsafeInternshipServiceServer interface {
	mustEmbedUnimplementedInternshipServiceServer()
}

func RegisterInternshipServiceServer(s grpc.ServiceRegistrar, srv InternshipServiceServer) {
	s.RegisterService(&InternshipService_ServiceDesc, srv)
}

func _InternshipService_AddInternship_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddInternshipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternshipServiceServer).AddInternship(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internship.InternshipService/AddInternship",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternshipServiceServer).AddInternship(ctx, req.(*AddInternshipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternshipService_GetInternship_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInternshipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternshipServiceServer).GetInternship(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internship.InternshipService/GetInternship",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternshipServiceServer).GetInternship(ctx, req.(*GetInternshipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternshipService_GetAllInternships_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllInternshipsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternshipServiceServer).GetAllInternships(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internship.InternshipService/GetAllInternships",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternshipServiceServer).GetAllInternships(ctx, req.(*GetAllInternshipsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternshipService_UpdateInternship_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateInternshipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternshipServiceServer).UpdateInternship(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internship.InternshipService/UpdateInternship",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternshipServiceServer).UpdateInternship(ctx, req.(*UpdateInternshipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternshipService_DeleteInternship_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteInternshipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternshipServiceServer).DeleteInternship(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internship.InternshipService/DeleteInternship",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternshipServiceServer).DeleteInternship(ctx, req.(*DeleteInternshipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// InternshipService_ServiceDesc is the grpc.ServiceDesc for InternshipService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InternshipService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "internship.InternshipService",
	HandlerType: (*InternshipServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddInternship",
			Handler:    _InternshipService_AddInternship_Handler,
		},
		{
			MethodName: "GetInternship",
			Handler:    _InternshipService_GetInternship_Handler,
		},
		{
			MethodName: "GetAllInternships",
			Handler:    _InternshipService_GetAllInternships_Handler,
		},
		{
			MethodName: "UpdateInternship",
			Handler:    _InternshipService_UpdateInternship_Handler,
		},
		{
			MethodName: "DeleteInternship",
			Handler:    _InternshipService_DeleteInternship_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/proto/internship/internship.proto",
}
