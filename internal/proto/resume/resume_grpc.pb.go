// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.1
// source: internal/proto/resume/resume.proto

package resumePb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ResumeServiceClient is the client API for ResumeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ResumeServiceClient interface {
	UploadResume(ctx context.Context, opts ...grpc.CallOption) (ResumeService_UploadResumeClient, error)
	GetResume(ctx context.Context, in *GetResumeRequest, opts ...grpc.CallOption) (*GetResumeResponse, error)
	DeleteResume(ctx context.Context, in *DeleteResumeRequest, opts ...grpc.CallOption) (*DeleteResumeResponse, error)
}

type resumeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewResumeServiceClient(cc grpc.ClientConnInterface) ResumeServiceClient {
	return &resumeServiceClient{cc}
}

func (c *resumeServiceClient) UploadResume(ctx context.Context, opts ...grpc.CallOption) (ResumeService_UploadResumeClient, error) {
	stream, err := c.cc.NewStream(ctx, &ResumeService_ServiceDesc.Streams[0], "/resume.ResumeService/UploadResume", opts...)
	if err != nil {
		return nil, err
	}
	x := &resumeServiceUploadResumeClient{stream}
	return x, nil
}

type ResumeService_UploadResumeClient interface {
	Send(*ResumeUploadRequest) error
	CloseAndRecv() (*ResumeUploadResponse, error)
	grpc.ClientStream
}

type resumeServiceUploadResumeClient struct {
	grpc.ClientStream
}

func (x *resumeServiceUploadResumeClient) Send(m *ResumeUploadRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *resumeServiceUploadResumeClient) CloseAndRecv() (*ResumeUploadResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ResumeUploadResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *resumeServiceClient) GetResume(ctx context.Context, in *GetResumeRequest, opts ...grpc.CallOption) (*GetResumeResponse, error) {
	out := new(GetResumeResponse)
	err := c.cc.Invoke(ctx, "/resume.ResumeService/GetResume", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resumeServiceClient) DeleteResume(ctx context.Context, in *DeleteResumeRequest, opts ...grpc.CallOption) (*DeleteResumeResponse, error) {
	out := new(DeleteResumeResponse)
	err := c.cc.Invoke(ctx, "/resume.ResumeService/DeleteResume", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ResumeServiceServer is the server API for ResumeService service.
// All implementations must embed UnimplementedResumeServiceServer
// for forward compatibility
type ResumeServiceServer interface {
	UploadResume(ResumeService_UploadResumeServer) error
	GetResume(context.Context, *GetResumeRequest) (*GetResumeResponse, error)
	DeleteResume(context.Context, *DeleteResumeRequest) (*DeleteResumeResponse, error)
	mustEmbedUnimplementedResumeServiceServer()
}

// UnimplementedResumeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedResumeServiceServer struct {
}

func (UnimplementedResumeServiceServer) UploadResume(ResumeService_UploadResumeServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadResume not implemented")
}
func (UnimplementedResumeServiceServer) GetResume(context.Context, *GetResumeRequest) (*GetResumeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResume not implemented")
}
func (UnimplementedResumeServiceServer) DeleteResume(context.Context, *DeleteResumeRequest) (*DeleteResumeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteResume not implemented")
}
func (UnimplementedResumeServiceServer) mustEmbedUnimplementedResumeServiceServer() {}

// UnsafeResumeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ResumeServiceServer will
// result in compilation errors.
type UnsafeResumeServiceServer interface {
	mustEmbedUnimplementedResumeServiceServer()
}

func RegisterResumeServiceServer(s grpc.ServiceRegistrar, srv ResumeServiceServer) {
	s.RegisterService(&ResumeService_ServiceDesc, srv)
}

func _ResumeService_UploadResume_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ResumeServiceServer).UploadResume(&resumeServiceUploadResumeServer{stream})
}

type ResumeService_UploadResumeServer interface {
	SendAndClose(*ResumeUploadResponse) error
	Recv() (*ResumeUploadRequest, error)
	grpc.ServerStream
}

type resumeServiceUploadResumeServer struct {
	grpc.ServerStream
}

func (x *resumeServiceUploadResumeServer) SendAndClose(m *ResumeUploadResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *resumeServiceUploadResumeServer) Recv() (*ResumeUploadRequest, error) {
	m := new(ResumeUploadRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ResumeService_GetResume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResumeServiceServer).GetResume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resume.ResumeService/GetResume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResumeServiceServer).GetResume(ctx, req.(*GetResumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResumeService_DeleteResume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteResumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResumeServiceServer).DeleteResume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resume.ResumeService/DeleteResume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResumeServiceServer).DeleteResume(ctx, req.(*DeleteResumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ResumeService_ServiceDesc is the grpc.ServiceDesc for ResumeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ResumeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "resume.ResumeService",
	HandlerType: (*ResumeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetResume",
			Handler:    _ResumeService_GetResume_Handler,
		},
		{
			MethodName: "DeleteResume",
			Handler:    _ResumeService_DeleteResume_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadResume",
			Handler:       _ResumeService_UploadResume_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "internal/proto/resume/resume.proto",
}
